version: '3'
services:
  # Django Service
  django:
    build:
      context: ./server
    container_name: django-app
    entrypoint: /bin/sh -c "python manage.py migrate --noinput && python manage.py seed_cars && exec gunicorn --bind 0.0.0.0:8000 djangobackend.wsgi:application"
    ports:
      - "8000:8000"
    volumes:
      - ./server:/app
      - ./wait-for-it.sh:/app/wait-for-it.sh
    environment:
      - DATABASE_URL=${DATABASE_URL}  # Render PostgreSQL connection
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
    depends_on:
      - node
      - python-service
      - db
    networks:
      - app-network

  # Node.js Service
  node:
    build:
      context: ./functions
      dockerfile: Dockerfile.node
    container_name: node-app
    command: node get-dealership.js
    ports:
      - "3000:3000"
    volumes:
      - ./functions:/usr/src/app
    env_file:
      - .env  # Loads environment variables from .env
    networks:
      - app-network

  # Python Service (reviews.py)
  python-service:
    build:
      context: ./functions
      dockerfile: Dockerfile.python
    container_name: python-app
    command: python reviews.py
    ports:
      - "5000:5000"
    volumes:
      - ./functions:/usr/src/reviews
    env_file:
      - .env  # Loads environment variables from .env
    networks:
      - app-network

  # PostgreSQL Service with External Access
  db:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB:${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    command: [ "postgres", "-c", "listen_addresses=*" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      retries: 5
      timeout: 5s

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
